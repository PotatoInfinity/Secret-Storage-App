import base64
import time
def right_rotate(x, n):
    return ((x >> n) | (x << (32 - n))) & 0xffffffff
def sha256(message):
    if isinstance(message, str):
        message = message.encode('utf-8')
    message = bytearray(message)
    orig_len_in_bits = (8 * len(message)) & 0xffffffffffffffff
    message.append(0x80)
    while (len(message) * 8) % 512 != 448:
        message.append(0)
    message += orig_len_in_bits.to_bytes(8, byteorder='big')
    h0 = 0x6a09e667
    h1 = 0xbb67ae85
    h2 = 0x3c6ef372
    h3 = 0xa54ff53a
    h4 = 0x510e527f
    h5 = 0x9b05688c
    h6 = 0x1f83d9ab
    h7 = 0x5be0cd19
    k = [
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ]
    for i in range(0, len(message), 64):
        chunk = message[i:i+64]
        w = [int.from_bytes(chunk[j:j+4], 'big') for j in range(0, 64, 4)]
        for j in range(16, 64):
            s0 = (right_rotate(w[j-15], 7)) ^ (right_rotate(w[j-15], 18)) ^ (w[j-15] >> 3)
            s1 = (right_rotate(w[j-2], 17)) ^ (right_rotate(w[j-2], 19)) ^ (w[j-2] >> 10)
            w.append((w[j-16] + s0 + w[j-7] + s1) & 0xffffffff)
        a, b, c, d, e, f, g, h = h0, h1, h2, h3, h4, h5, h6, h7
        for j in range(64):
            S1 = (right_rotate(e, 6)) ^ (right_rotate(e, 11)) ^ (right_rotate(e, 25))
            ch = (e & f) ^ ((~e) & g)
            temp1 = (h + S1 + ch + k[j] + w[j]) & 0xffffffff
            S0 = (right_rotate(a, 2)) ^ (right_rotate(a, 13)) ^ (right_rotate(a, 22))
            maj = (a & b) ^ (a & c) ^ (b & c)
            temp2 = (S0 + maj) & 0xffffffff
            h = g
            g = f
            f = e
            e = (d + temp1) & 0xffffffff
            d = c
            c = b
            b = a
            a = (temp1 + temp2) & 0xffffffff
        h0 = (h0 + a) & 0xffffffff
        h1 = (h1 + b) & 0xffffffff
        h2 = (h2 + c) & 0xffffffff
        h3 = (h3 + d) & 0xffffffff
        h4 = (h4 + e) & 0xffffffff
        h5 = (h5 + f) & 0xffffffff
        h6 = (h6 + g) & 0xffffffff
        h7 = (h7 + h) & 0xffffffff
    return '{:08x}{:08x}{:08x}{:08x}{:08x}{:08x}{:08x}{:08x}'.format(
        h0, h1, h2, h3, h4, h5, h6, h7
    )
def xor_encrypt(plaintext, key):
    plaintext_bytes = plaintext.encode('utf-8')
    key_bytes = key.encode('utf-8')
    encrypted_bytes = bytearray()
    for i, byte in enumerate(plaintext_bytes):
        encrypted_bytes.append(byte ^ key_bytes[i % len(key_bytes)])
    return base64.b64encode(encrypted_bytes).decode('utf-8')
def xor_decrypt(ciphertext, key):
    key_bytes = key.encode('utf-8')
    encrypted_bytes = base64.b64decode(ciphertext)
    decrypted_bytes = bytearray()
    for i, byte in enumerate(encrypted_bytes):
        decrypted_bytes.append(byte ^ key_bytes[i % len(key_bytes)])
    return decrypted_bytes.decode('utf-8')
def create_account():
    username = input("Enter username: ").strip()
    try:
        with open('D:/accounts.txt', 'r') as f:
            existing_users = {line.split(',')[0] for line in f if line.strip()}
    except FileNotFoundError:
        existing_users = set()
    if username in existing_users:
        print("Username already exists. Please choose a different username.")
        return
    password = input("Enter password: ")
    hashed_password = sha256(password)
    with open('D:/accounts.txt', 'a') as f:
        f.write(f"{username},{hashed_password}\n")
    print("Account created successfully!")
def sign_in():
    attempts = 3
    last_attempt_time = None
    while attempts > 0:
        if last_attempt_time and (time.time() - last_attempt_time > 120):
            attempts = 3
        username = input("Enter username: ").strip()
        password = input("Enter password: ")
        hashed_password = sha256(password)
        try:
            with open('D:/accounts.txt', 'r') as f:
                accounts = [line.strip().split(',') for line in f if line.strip()]
        except FileNotFoundError:
            print("No accounts exist yet. Please create an account first.")
            return None, None

        for stored_username, stored_hashed in accounts:
            if stored_username == username and stored_hashed == hashed_password:
                print("Signed in successfully!")
                return username, password
        attempts -= 1
        last_attempt_time = time.time()
        print(f"Invalid username or password! Attempts remaining: {attempts}")
    print("Too many failed attempts.")
    return None, None
def secret_menu(username, password):
    while True:
        print("\nSecret Menu:")
        print("1. Add secret")
        print("2. View secrets")
        print("3. Delete account")
        print("4. Sign out")
        choice = input("Enter your choice: ").strip()
        if choice == "1":
            secret = input("Enter your secret: ")
            encrypted_secret = xor_encrypt(secret, password)
            with open('D:/secrets.txt', 'a') as f:
                f.write(f"{username},{encrypted_secret}\n")
            print("Secret added successfully!")
        elif choice == "2":
            try:
                with open('D:/secrets.txt', 'r') as f:
                    lines = f.readlines()
            except FileNotFoundError:
                lines = []
            user_secrets = []
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                stored_username, encrypted_secret = line.split(',', 1)
                if stored_username == username:
                    try:
                        decrypted_secret = xor_decrypt(encrypted_secret, password)
                        user_secrets.append(decrypted_secret)
                    except Exception as e:
                        user_secrets.append("Error decrypting secret (possibly due to a wrong key).")
            if user_secrets:
                print("Your Secrets:")
                for secret in user_secrets:
                    print(" -", secret)
            else:
                print("No secrets stored.")
        elif choice == "3":
            confirm = input("Are you sure you want to delete your account? This cannot be undone (y/n): ").strip().lower()
            if confirm == 'y':
                try:
                    with open('D:/accounts.txt', 'r') as f:
                        lines = f.readlines()
                    with open('D:/accounts.txt', 'w') as f:
                        for line in lines:
                            if line.strip():
                                stored_username, _ = line.strip().split(',', 1)
                                if stored_username != username:
                                    f.write(line)
                except FileNotFoundError:
                    pass
                try:
                    with open('D:/secrets.txt', 'r') as f:
                        lines = f.readlines()
                    with open('D:/secrets.txt', 'w') as f:
                        for line in lines:
                            if line.strip():
                                stored_username, _ = line.strip().split(',', 1)
                                if stored_username != username:
                                    f.write(line)
                except FileNotFoundError:
                    pass
                print("Account deleted successfully!")
                return "deleted"  
            else:
                print("Account deletion cancelled.")
        elif choice == "4":
            break
        else:
            print("Invalid choice, please try again.")
def main():
    while True:
        print("\nMain Menu:")
        print("1. Create Account")
        print("2. Sign In")
        print("3. Exit")
        choice = input("Enter your choice: ").strip()
        if choice == '1':
            create_account()
        elif choice == '2':
            username, password = sign_in()
            if username:
                result = secret_menu(username, password)
                if result == "deleted":
                    continue
        elif choice == '3':
            print("Goodbye!")
            break
        else:
            print("Invalid choice, please try again.")
if __name__ == '__main__':
    main()
